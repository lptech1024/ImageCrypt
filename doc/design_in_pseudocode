get_supported_format
{
	// If file extension matches known, check that format first
	
	if (!supported(valid_files[i])
	{
		printf("File unsupported!");
	}
}

// Obsolete
convert(FILE *input_file, FILE *output_file, FPE_KEY fpe_key, bool encrypt)
{
	loaded = load_file(input_file);
	char *converted = convert_loaded(loaded, fpe_key, encrypt);
	write_converted(converted, output_file);
}

convert_formats(files_with_formats, passphrase, cryptography_mode cryptography_mode)
{
	const *key = get_key(passphrase);
	FPE_KEY ff1;
	fpe_set_ff1_key(key ..., &ff1_key);
	for each file_with_formats
		// Convert is a function pointer
		files_with_format->convert(files_with_format->input_file, files_with_format->output_file, FPE_KEY fpe_key, encrypt);
}

// Passphrase isn't empty
// iterator has at least one input file path
// cryptography_mode is DECRYPT or ENCRYPT
handle_user_inputs(char *passphrase, transform_details_iterator *iterator, cryptography_mode cryptography_mode)
{
	transform_details_iterator_reset(iterator);

	// Dump all transform_details where output path exists
	// Default output file paths where not set
	sanitize_outputs(iterator, cryptography_mode);
	if (!iterator->current)
	{
		fprintf(stderr, "No supported files!\n");
	}

	transform_details_iterator_reset(iterator);

	// Dump all invalid files
	// Find out formats
	get_supported_formats(iterator);
	if (!iterator->current)
	{
		fprintf(stderr, "No supported files!\n");
	}

	transform_details_iterator_reset(iterator);

	// Look at all inputpaths and output paths, checking for duplicates
	remove_duplicates(iterator);
	if (!iterator->current)
	{
		fprintf(stderr, "No supported non-duplicates!\n");
	}

	transform_details_iterator_reset(iterator);

	// Need tool to maintain file read/write stack (only one at a time for eventual multithreading)
	// Maximum number of threads could probably be something like min(CPU_count, 250)
	// At this point, we have input paths, output paths, file formats, passphrase, and a cryptography mode
	convert_formats(iterator, passphrase, cryptography_mode);
}
