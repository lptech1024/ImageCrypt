stages:
  - build
  - deploy

debian latest build:
  image: debian:latest
  stage: build
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install cmake make clang clang-tidy libssl-dev
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

debian latest deploy:
  image: debian:latest
  stage: deploy
  needs:
    - job: debian latest build
      artifacts: true
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install openssl
  script: "./build/*.sh --skip-license"

ubuntu 19.10 build:
  image: ubuntu:19.10
  stage: build
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install cmake make clang clang-tidy libssl-dev
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

ubuntu 19.10 deploy:
  image: ubuntu:19.10
  stage: deploy
  needs:
    - job: ubuntu 19.10 build
      artifacts: true
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install openssl
  script: "./build/*.sh --skip-license"

ubuntu 20.04 build:
  image: ubuntu:20.04
  stage: build
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install cmake make clang clang-tidy libssl-dev
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

ubuntu 20.04 deploy:
  image: ubuntu:20.04
  stage: deploy
  needs:
    - job: ubuntu 20.04 build
      artifacts: true
  before_script:
    - apt-get update --quiet
    - apt-get --assume-yes --quiet install openssl
  script: "./build/*.sh --skip-license"

centos latest build:
  image: centos:latest
  stage: build
  before_script:
    # CI-specific dependencies
    - dnf install --best --assumeyes --quiet bash
    # Build system dependencies
    # Using Python to install latest version of pip
    - dnf install --best --assumeyes --quiet python3
    # Using pip to install latest version of cmake
    - python3 -m pip install --upgrade pip
    - pip install --quiet cmake
    - dnf install --best --assumeyes --quiet make clang
    - export CC=/usr/bin/clang
    # Project dependency
    - dnf install --best --assumeyes --quiet openssl-devel
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

centos latest deploy:
  image: centos:latest
  stage: deploy
  needs:
    - job: centos latest build
      artifacts: true
  before_script:
    - dnf install --assumeyes --quiet openssl
  script: "./build/*.sh --skip-license"

fedora latest build:
  image: fedora:latest
  stage: build
  before_script:
    # Project
    - dnf install --assumeyes --quiet openssl-devel
    # Build System
    - dnf install --assumeyes --quiet cmake make clang
    - export CC=/usr/bin/clang
    # Packaging
    - dnf install --assumeyes --quiet rpm-build rpmlint
  script: "./scripts/build_fedora_rpm.sh"
  artifacts:
    when: on_success
    paths:
      - custom_rpm_build/*.rpm

fedora latest deploy:
  image: fedora:latest
  stage: deploy
  needs:
    - job: fedora latest build
      artifacts: true
  before_script:
    - dnf upgrade --assumeyes --quiet openssl dnf
  script:
    - dnf install --assumeyes --verbose custom_rpm_build/*.rpm

mageia 7 build:
  # "latest" points to 6
  image: mageia:7
  stage: build
  before_script:
    - dnf install --assumeyes --quiet cmake make clang openssl-devel
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
      when: on_success
      paths:
        - build/*.sh

mageia 7 deploy:
  image: mageia:7
  stage: deploy
  needs:
    - job: mageia 7 build
      artifacts: true
  before_script:
    - dnf install --assumeyes --quiet openssl
  script: "./build/*.sh --skip-license"

archlinux latest build:
  image: archlinux:latest
  stage: build
  before_script:
    - pacman --quiet --sync --refresh --sysupgrade --needed --noprogressbar --noconfirm cmake make clang openssl bash
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

archlinux latest deploy:
  image: archlinux:latest
  stage: deploy
  needs:
    - job: archlinux latest build
      artifacts: true
  before_script:
    - pacman --quiet --sync --refresh --sysupgrade --needed --noprogressbar --noconfirm openssl
  script: "./build/*.sh --skip-license"

clearlinux latest build:
  image: clearlinux:latest
  stage: build
  before_script:
    - swupd bundle-add --no-progress --quiet c-basic devpkg-openssl
    - export CC=/usr/bin/clang
  script: "./scripts/build_generic.sh"
  artifacts:
    when: on_success
    paths:
      - build/*.sh

clearlinux latest deploy:
  image: clearlinux:latest
  stage: deploy
  needs:
    - job: clearlinux latest build
      artifacts: true
  before_script:
    - swupd bundle-add --no-progress --quiet openssl
  script: "./build/*.sh --skip-license"
